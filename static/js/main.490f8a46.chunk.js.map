{"version":3,"sources":["templates/ContentWithHeaderAndFooter/index.js","pages/Home/index.js","App.js","serviceWorker.js","index.js","templates/ContentWithHeaderAndFooter/style.module.css","icone-sem-fundo.png","pages/Home/style.module.css","logo-principal.png"],"names":["Header","Layout","Content","Footer","ContentWithHeaderAndFooter","children","size","className","style","header","logo","src","alt","body","footer","Date","getFullYear","defaultProps","Home","home","bg","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"uOAMQA,EAA4BC,IAA5BD,OAAQE,EAAoBD,IAApBC,QAASC,EAAWF,IAAXE,OAEnBC,EAA6B,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,SAAUC,EAAS,EAATA,KAC/C,OAEA,kBAAC,IAAD,CAAQC,UAAU,UACd,kBAACP,EAAD,CAAQO,UAAWC,IAAMC,QACrB,yBAAKF,UAAWC,IAAME,MAClB,yBAAKC,IAAKD,IAAME,IAAI,uDAG5B,kBAACV,EAAD,KACI,yBAAKK,UAAS,UAAKC,IAAMK,KAAX,YAAmBL,IAAMF,KAClCD,IAGT,kBAACF,EAAD,CAAQI,UAAWC,IAAMM,QAAzB,eACS,IAAIC,MAAOC,cADpB,iBAWJZ,EAA2Ba,aAAe,CACtCX,KAAM,SAEKF,Q,kCCtBAc,EATF,WACb,OAAQ,kBAAC,EAAD,KACA,yBAAKX,UAAWC,IAAMW,MAClB,yBAAKR,IAAKS,IAAIR,IAAI,QCEfS,MANf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,mBExI5BC,EAAOC,QAAU,CAAC,OAAS,iCAAmC,cAAc,UAAU,OAAS,sBAAsB,KAAO,oBAAoB,OAAS,sBAAsB,QAAU,uBAAuB,KAAO,sB,mBCDvND,EAAOC,QAAU,IAA0B,6C,mBCC3CD,EAAOC,QAAU,CAAC,KAAO,sB,mBCDzBD,EAAOC,QAAU,IAA0B,4C","file":"static/js/main.490f8a46.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types';\nimport {Layout} from 'antd'\nimport style from './style.module.css';\nimport logo from '../../icone-sem-fundo.png';\n\nconst { Header, Content, Footer } = Layout;\n\nconst ContentWithHeaderAndFooter = ({children, size}) =>{\nreturn (\n\n<Layout className=\"layout\">\n    <Header className={style.header}>\n        <div className={style.logo}>\n            <img src={logo} alt=\"Fononeura logo. Retorna para página principal\"/>\n        </div>\n    </Header>\n    <Content>\n        <div className={`${style.body} ${style[size]}`}>\n            {children}\n        </div>\n    </Content>\n    <Footer className={style.footer}>\n        {`©${new Date().getFullYear()} Fononeura`}\n    </Footer>\n</Layout>);\n};\n\nContentWithHeaderAndFooter.propTypes = {\n    children: PropTypes.any,\n    size: PropTypes.oneOf(['medium', 'large']),\n};\n\nContentWithHeaderAndFooter.defaultProps = {\n    size: 'large',\n  };\nexport default ContentWithHeaderAndFooter;\n","import React from 'react'\nimport ContentWithHeaderAndFooter from '../../templates/ContentWithHeaderAndFooter';\nimport style from './style.module.css';\nimport bg from '../../logo-principal.png';\n\nconst Home = () => {\nreturn( <ContentWithHeaderAndFooter> \n        <div className={style.home}>\n            <img src={bg} alt=\"\"/>\n        </div>\n        </ContentWithHeaderAndFooter>\n      )\n}\n\nexport default Home;","import React from 'react';\nimport './App.css';\nimport Home from './pages/Home';\n\nfunction App() {\n  return (\n    <Home/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"colors\":\"\\\"../../stylesheets/colors.css\\\"\",\"dark-indigo\":\"#1C1259\",\"header\":\"style_header__1tH06\",\"logo\":\"style_logo__2eaSm\",\"footer\":\"style_footer__Uztr3\",\"content\":\"style_content__1z2XJ\",\"body\":\"style_body__2_YpB\"};","module.exports = __webpack_public_path__ + \"static/media/icone-sem-fundo.c666a680.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"style_home__H1DD-\"};","module.exports = __webpack_public_path__ + \"static/media/logo-principal.ff8388d9.png\";"],"sourceRoot":""}